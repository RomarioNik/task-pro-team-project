{"version":3,"file":"static/js/894.76d9feb3.chunk.js","mappings":"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","sources":["webpack://task-pro-team-project/./src/components/AuthButton/AuthButton.module.css?7e1c","components/AuthButton/AuthButton.js","components/LoginForm/LoginForm.jsx","components/RegisterForm/RegisterForm.jsx","webpack://task-pro-team-project/./src/pages/AuthPage.module.css?99b5","pages/AuthPage.jsx","scheme/LoginFormSchema.js","scheme/RegisterFormSchema.js","scheme/EditProfileSchema.js","webpack://task-pro-team-project/./src/components/RegisterForm/RegisterForm.module.css?a5d4"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"AuthButton\":\"AuthButton_AuthButton__0oGbx\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './AuthButton.module.css';\n\nconst AuthButton = ({ textBtn}) => {\n  return (\n    <button type=\"submit\" className={css.AuthButton} >\n      {textBtn}\n    </button>\n  );\n};\n\nAuthButton.propTypes = {\n  text: PropTypes.string,\n  onClick: PropTypes.func, \n};\n\nexport default AuthButton;","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { loginUser } from '../../redux/auth/operations';\nimport { loginFormSchema } from 'scheme/index';\nimport css from '../RegisterForm/RegisterForm.module.css';\nimport sprite from 'img/svg/sprite-icon.svg';\nimport AuthButton from 'components/AuthButton/AuthButton';\nimport { NavLink } from 'react-router-dom';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  const togglePasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const onSubmit = (values, { resetForm }) => {\n    dispatch(loginUser(values));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={loginFormSchema}\n        onSubmit={onSubmit}\n      >\n        {() => (\n          <Form className={css.form}>\n            <NavLink to=\"/auth/register\"className={css.navLink}>\n                Registration\n              </NavLink>\n              <NavLink to=\"/auth/login\" className={`${css.navLink} ${css.active}`}   >Login</NavLink> \n            <label className={css.input}>\n              <Field\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter your email\"\n                className={css.inputField}\n              />\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                className={css.inputError}\n              />\n            </label>\n            <label className={css.input}>\n              <Field\n                type={passwordVisible ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Confirm a password\"\n                className={css.inputField}\n              />\n              <ErrorMessage\n                name=\"password\"\n                component=\"div\"\n                className={css.inputError}\n              />\n\n              <span\n                className={css.passwordToggle}\n                onClick={togglePasswordVisibility}\n              >\n                {passwordVisible ? (\n                  <svg width=\"18\" height=\"18\" className={css.fieldIcon}>\n                    <use xlinkHref={`${sprite}#icon-eye-off`} />\n                  </svg>\n                ) : (\n                  <svg width=\"18\" height=\"18\" className={css.fieldIcon}>\n                    <use xlinkHref={`${sprite}#eye`} />\n                  </svg>\n                )}\n              </span>\n            </label>\n\n            <AuthButton textBtn=\"Login In Now\" />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default LoginForm;","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { registerUser } from 'redux/auth/operations';\nimport { registerFormSchema } from 'scheme/index';\nimport css from './RegisterForm.module.css';\nimport sprite from 'img/svg/sprite-icon.svg';\nimport AuthButton from 'components/AuthButton/AuthButton';\nimport { NavLink } from 'react-router-dom';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  const togglePasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const onSubmit = (values, { resetForm }) => {\n    dispatch(registerUser(values));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={registerFormSchema}\n        onSubmit={onSubmit}\n      >\n        {() => (\n          <Form className={css.form}>\n            <NavLink\n              to=\"/auth/register\"\n              className={`${css.navLink} ${css.active}`}\n            >\n              Registration\n            </NavLink>\n            <NavLink to=\"/auth/login\" className={css.navLink}>\n              Login\n            </NavLink>\n\n            <label className={css.input}>\n              <Field                \n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Enter your name\"\n                className={css.inputField}\n              />\n              <ErrorMessage\n                name=\"name\"\n                component=\"div\"\n                className={css.inputError}\n              />\n            </label>\n            <label className={css.input}>\n              <Field\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter your email\"\n                className={css.inputField}\n              />\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                className={css.inputError}\n              />\n            </label>\n            <label className={css.input}>\n              <Field\n                type={passwordVisible ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Create a password\"\n                className={css.inputField}\n              />\n              <ErrorMessage\n                name=\"password\"\n                component=\"div\"\n                className={css.inputError}\n              />\n\n              <span\n                className={css.passwordToggle}\n                onClick={togglePasswordVisibility}\n              >\n                {passwordVisible ? (\n                  <svg width=\"18\" height=\"18\" className={css.fieldIcon}>\n                    <use xlinkHref={`${sprite}#icon-eye-off`} />\n                  </svg>\n                ) : (\n                  <svg width=\"18\" height=\"18\" className={css.fieldIcon}>\n                    <use xlinkHref={`${sprite}#eye`} />\n                  </svg>\n                )}\n              </span>\n            </label>\n\n            <AuthButton textBtn=\"Register Now\" />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default RegisterForm;","// extracted by mini-css-extract-plugin\nexport default {\"authPage\":\"AuthPage_authPage__pgrSh\"};","import LoginForm from 'components/LoginForm/LoginForm';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\nimport React from 'react';\nimport css from './AuthPage.module.css';\n// import { Outlet } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\n\nconst AuthPage = () => {\n  const { id } = useParams();\n\n  return (\n    <div className={css.authPage}>\n      {id === 'login' ? <LoginForm /> : <RegisterForm />}\n    </div>\n  );\n};\n\nexport default AuthPage;\n","import * as yup from 'yup';\n\nexport const loginFormSchema = yup.object().shape({\n  email: yup\n    .string()\n    .required('Email is required')\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+{}[\\]:;<>,.?~-]+$/,\n      'Invalid email format'\n    )\n    .trim(),\n\n  password: yup\n    .string()\n    .min(8, 'Password should be at least 8 characters')\n    .max(64, 'Password is too long')\n    .matches(\n      /^[A-Za-z0-9!@#$%^&*()_+=\\-[\\]{}|\\\\:;\"'<>,.?/~`]+$/,\n      'Invalid password format'\n    )\n    .required('Password is required'),\n});","import * as yup from 'yup';\n\nexport const registerFormSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .required('Name is required')\n      .min(2, 'Username must be at least 2 characters')\n      .max(32, 'Username can be at most 32 characters')\n      .matches(\n        /^[a-zA-Z0-9!@#$%^&*()_+{}[\\]:;<>,.?~-]+$/,\n        'Invalid name format'\n      )\n      .trim(),\n\n    email: yup\n      .string()\n      .required('Email is required')\n      .matches(\n        /^([A-Za-z0-9_-]+.)*[A-Za-z0-9_-]+@[a-z0-9_-]+(.[a-z0-9_-]+)*.[a-z]{2,6}$/,\n        'Invalid email format'\n      )\n      .trim(),\n    password: yup\n      .string()\n      .min(8, 'Password should be at least 8 characters')\n      .max(64, 'Password is too long')\n      .matches(\n        /^[A-Za-z0-9!@#$%^&*()_+=\\-[\\]{}|\\\\:;\"'<>,.?/~`]+$/,\n        'Invalid password format'\n      )\n      .required('Password is required'),\n  })\n  .required();\n","import * as yup from 'yup';\n\nexport const editProfileSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .required('Name is required')\n      .min(2, 'Username must be at least 2 characters')\n      .max(32, 'Username can be at most 32 characters')\n      .matches(\n        // /^[a-zA-Z0-9!@#$%^&*()_+{}\\[\\]:;<>,.?~-]+$/,\n        /^[a-zA-Z0-9!@#$%^&*()_+{}[\\]:;<>,.?~-]+$/,\n        'Invalid name format'\n      )\n      .trim(),\n\n    email: yup\n      .string()\n      .required('Email is required')\n      .matches(\n        /^([A-Za-z0-9_-]+.)*[A-Za-z0-9_-]+@[a-z0-9_-]+(.[a-z0-9_-]+)*.[a-z]{2,6}$/,\n        'Invalid email format'\n      )\n      .trim(),\n    password: yup\n      .string()\n      .min(8, 'Password should be at least 8 characters')\n      .max(64, 'Password is too long')\n      .matches(\n        /^[A-Za-z0-9!@#$%^&*()_+=\\-[\\]{}|\\\\:;\"'<>,.?/~`]+$/,\n        'Invalid password format'\n      )\n  })\n  .required();\n","// extracted by mini-css-extract-plugin\nexport default {\"navLink\":\"RegisterForm_navLink__8t31+\",\"active\":\"RegisterForm_active__rnlAu\",\"form\":\"RegisterForm_form__Tv43W\",\"input\":\"RegisterForm_input__FsgBz\",\"inputField\":\"RegisterForm_inputField__GnoEd\",\"inputError\":\"RegisterForm_inputError__c6zsh\",\"fieldIcon\":\"RegisterForm_fieldIcon__5ALxE\"};"],"names":["textBtn","type","className","css","dispatch","useDispatch","useState","passwordVisible","setPasswordVisible","togglePasswordVisibility","initialValues","email","password","validationSchema","loginFormSchema","onSubmit","values","resetForm","loginUser","to","name","placeholder","component","onClick","width","height","xlinkHref","sprite","registerFormSchema","registerUser","id","useParams","LoginForm","RegisterForm","yup","shape","required","matches","trim","min","max","editProfileSchema"],"sourceRoot":""}